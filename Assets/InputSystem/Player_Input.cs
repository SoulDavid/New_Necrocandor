//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSystem/Player_Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Input"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""033239cd-d4b9-4111-ad2f-96fd31dc1fe3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7ac4b507-2e2b-4569-b469-5843e3e4feb9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8349055b-8c8d-4cb6-b221-26fe382990de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hook"",
                    ""type"": ""Button"",
                    ""id"": ""d3ed8527-b325-459c-b4ff-609df700f110"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Impulse"",
                    ""type"": ""Button"",
                    ""id"": ""9e74c112-7895-4e45-b794-7bb5519820ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold"",
                    ""type"": ""Button"",
                    ""id"": ""c2905848-2ac8-4333-b5a9-a8b1164a4317"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dialogue"",
                    ""type"": ""Button"",
                    ""id"": ""680f4ee4-b059-427e-9a2e-ed71b5314323"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7ce2d8f7-2646-44ed-8c8c-064f02e5d565"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5688c79-ff1b-4f35-9984-d97b9288d8c7"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""A/D"",
                    ""id"": ""464a09cc-2f90-4913-a535-4beb017c303a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1b0df557-697c-4bf7-a6b5-a4bcb5d2022d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""30729047-2ee8-47ee-9586-bceb35d616d9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""GamepadStick"",
                    ""id"": ""443aba14-764b-4ee3-a53a-784b043c05fc"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d72618f8-efb0-4b99-b96c-a9d48d33f8a6"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fe7b464f-91df-43c8-8caf-ff439d2c954d"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""72c0adbb-5970-4091-93ec-dc2a517d21a4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e998348c-6c2e-4b24-96fd-cb36b6e7d469"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""740b20e2-30db-4e8f-857d-dfab9aaa95f3"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Impulse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9495fe95-9cbc-44b6-bc60-b0cb431eff64"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Impulse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0041d16f-cfa9-4edc-88dd-5991f541f1c9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3d66f2a-0b86-4bfb-9357-f036dfb70e84"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa4d53d5-e784-4eee-8fea-fa2f6bc1f975"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b73d8e5-32c6-4b8a-bc31-b6079b1f2d3b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dialogue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SelectionCharacter"",
            ""id"": ""85da3d25-9171-431b-b493-c289c31fced8"",
            ""actions"": [
                {
                    ""name"": ""ChangeColorRight"",
                    ""type"": ""Button"",
                    ""id"": ""1b684450-6b27-4f33-b428-32771e9040bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeColorLeft"",
                    ""type"": ""Button"",
                    ""id"": ""2599b8c4-d604-4ad1-a4e3-b93eb29116fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JoinPlayer"",
                    ""type"": ""Button"",
                    ""id"": ""133b1c41-562f-4eb0-b1fe-5ec0f587419f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""59295437-4e5e-4943-95dd-056e5d69f192"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""997e6875-2fe0-49e4-bed7-54c7a122aad8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeColorRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38cf5f47-5458-4894-947d-78e43255fc30"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChangeColorRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb028cd6-d55d-4238-9c0a-992e86ef385a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeColorLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0429725-dac4-47a6-9315-53f8b731399a"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChangeColorLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2623e256-496d-4c4b-bb44-fb12eed74b27"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoinPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd8719cf-c787-42aa-b276-4859b46733d2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoinPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d28ee85-6722-4523-b648-132be69e2e73"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9446b205-478e-456c-883b-c669daa841ce"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Hook = m_Player.FindAction("Hook", throwIfNotFound: true);
        m_Player_Impulse = m_Player.FindAction("Impulse", throwIfNotFound: true);
        m_Player_Hold = m_Player.FindAction("Hold", throwIfNotFound: true);
        m_Player_Dialogue = m_Player.FindAction("Dialogue", throwIfNotFound: true);
        // SelectionCharacter
        m_SelectionCharacter = asset.FindActionMap("SelectionCharacter", throwIfNotFound: true);
        m_SelectionCharacter_ChangeColorRight = m_SelectionCharacter.FindAction("ChangeColorRight", throwIfNotFound: true);
        m_SelectionCharacter_ChangeColorLeft = m_SelectionCharacter.FindAction("ChangeColorLeft", throwIfNotFound: true);
        m_SelectionCharacter_JoinPlayer = m_SelectionCharacter.FindAction("JoinPlayer", throwIfNotFound: true);
        m_SelectionCharacter_StartGame = m_SelectionCharacter.FindAction("StartGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Hook;
    private readonly InputAction m_Player_Impulse;
    private readonly InputAction m_Player_Hold;
    private readonly InputAction m_Player_Dialogue;
    public struct PlayerActions
    {
        private @Player_Input m_Wrapper;
        public PlayerActions(@Player_Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Hook => m_Wrapper.m_Player_Hook;
        public InputAction @Impulse => m_Wrapper.m_Player_Impulse;
        public InputAction @Hold => m_Wrapper.m_Player_Hold;
        public InputAction @Dialogue => m_Wrapper.m_Player_Dialogue;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Hook.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHook;
                @Hook.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHook;
                @Hook.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHook;
                @Impulse.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnImpulse;
                @Impulse.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnImpulse;
                @Impulse.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnImpulse;
                @Hold.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHold;
                @Hold.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHold;
                @Hold.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHold;
                @Dialogue.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDialogue;
                @Dialogue.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDialogue;
                @Dialogue.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDialogue;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Hook.started += instance.OnHook;
                @Hook.performed += instance.OnHook;
                @Hook.canceled += instance.OnHook;
                @Impulse.started += instance.OnImpulse;
                @Impulse.performed += instance.OnImpulse;
                @Impulse.canceled += instance.OnImpulse;
                @Hold.started += instance.OnHold;
                @Hold.performed += instance.OnHold;
                @Hold.canceled += instance.OnHold;
                @Dialogue.started += instance.OnDialogue;
                @Dialogue.performed += instance.OnDialogue;
                @Dialogue.canceled += instance.OnDialogue;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // SelectionCharacter
    private readonly InputActionMap m_SelectionCharacter;
    private ISelectionCharacterActions m_SelectionCharacterActionsCallbackInterface;
    private readonly InputAction m_SelectionCharacter_ChangeColorRight;
    private readonly InputAction m_SelectionCharacter_ChangeColorLeft;
    private readonly InputAction m_SelectionCharacter_JoinPlayer;
    private readonly InputAction m_SelectionCharacter_StartGame;
    public struct SelectionCharacterActions
    {
        private @Player_Input m_Wrapper;
        public SelectionCharacterActions(@Player_Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeColorRight => m_Wrapper.m_SelectionCharacter_ChangeColorRight;
        public InputAction @ChangeColorLeft => m_Wrapper.m_SelectionCharacter_ChangeColorLeft;
        public InputAction @JoinPlayer => m_Wrapper.m_SelectionCharacter_JoinPlayer;
        public InputAction @StartGame => m_Wrapper.m_SelectionCharacter_StartGame;
        public InputActionMap Get() { return m_Wrapper.m_SelectionCharacter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectionCharacterActions set) { return set.Get(); }
        public void SetCallbacks(ISelectionCharacterActions instance)
        {
            if (m_Wrapper.m_SelectionCharacterActionsCallbackInterface != null)
            {
                @ChangeColorRight.started -= m_Wrapper.m_SelectionCharacterActionsCallbackInterface.OnChangeColorRight;
                @ChangeColorRight.performed -= m_Wrapper.m_SelectionCharacterActionsCallbackInterface.OnChangeColorRight;
                @ChangeColorRight.canceled -= m_Wrapper.m_SelectionCharacterActionsCallbackInterface.OnChangeColorRight;
                @ChangeColorLeft.started -= m_Wrapper.m_SelectionCharacterActionsCallbackInterface.OnChangeColorLeft;
                @ChangeColorLeft.performed -= m_Wrapper.m_SelectionCharacterActionsCallbackInterface.OnChangeColorLeft;
                @ChangeColorLeft.canceled -= m_Wrapper.m_SelectionCharacterActionsCallbackInterface.OnChangeColorLeft;
                @JoinPlayer.started -= m_Wrapper.m_SelectionCharacterActionsCallbackInterface.OnJoinPlayer;
                @JoinPlayer.performed -= m_Wrapper.m_SelectionCharacterActionsCallbackInterface.OnJoinPlayer;
                @JoinPlayer.canceled -= m_Wrapper.m_SelectionCharacterActionsCallbackInterface.OnJoinPlayer;
                @StartGame.started -= m_Wrapper.m_SelectionCharacterActionsCallbackInterface.OnStartGame;
                @StartGame.performed -= m_Wrapper.m_SelectionCharacterActionsCallbackInterface.OnStartGame;
                @StartGame.canceled -= m_Wrapper.m_SelectionCharacterActionsCallbackInterface.OnStartGame;
            }
            m_Wrapper.m_SelectionCharacterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeColorRight.started += instance.OnChangeColorRight;
                @ChangeColorRight.performed += instance.OnChangeColorRight;
                @ChangeColorRight.canceled += instance.OnChangeColorRight;
                @ChangeColorLeft.started += instance.OnChangeColorLeft;
                @ChangeColorLeft.performed += instance.OnChangeColorLeft;
                @ChangeColorLeft.canceled += instance.OnChangeColorLeft;
                @JoinPlayer.started += instance.OnJoinPlayer;
                @JoinPlayer.performed += instance.OnJoinPlayer;
                @JoinPlayer.canceled += instance.OnJoinPlayer;
                @StartGame.started += instance.OnStartGame;
                @StartGame.performed += instance.OnStartGame;
                @StartGame.canceled += instance.OnStartGame;
            }
        }
    }
    public SelectionCharacterActions @SelectionCharacter => new SelectionCharacterActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnHook(InputAction.CallbackContext context);
        void OnImpulse(InputAction.CallbackContext context);
        void OnHold(InputAction.CallbackContext context);
        void OnDialogue(InputAction.CallbackContext context);
    }
    public interface ISelectionCharacterActions
    {
        void OnChangeColorRight(InputAction.CallbackContext context);
        void OnChangeColorLeft(InputAction.CallbackContext context);
        void OnJoinPlayer(InputAction.CallbackContext context);
        void OnStartGame(InputAction.CallbackContext context);
    }
}
